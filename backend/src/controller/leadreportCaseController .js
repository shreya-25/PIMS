// const PDFDocument = require("pdfkit");
// const path = require("path");
// const fs = require("fs");

// // ---------- drawTable Helper ----------
// function drawTable(doc, startX, startY, headers, rows, colWidths, padding = 5) {
//   const minRowHeight = 20;
//   doc.font("Helvetica-Bold").fontSize(10);

//   let currentY = startY;
//   const headerHeight = 20;
//   let currentX = startX;

//   // Draw header row
//   headers.forEach((header, i) => {
//     doc.rect(currentX, currentY, colWidths[i], headerHeight).stroke();
//     doc.text(header, currentX + padding, currentY + padding, {
//       width: colWidths[i] - 2 * padding,
//       align: "left",
//     });
//     currentX += colWidths[i];
//   });
//   currentY += headerHeight;

//   // Body rows
//   doc.font("Helvetica").fontSize(10);
//   rows.forEach((row) => {
//     let maxHeight = 0;
//     currentX = startX;

//     // Calculate needed row height
//     headers.forEach((header, i) => {
//       const cellText = row[header] || "";
//       const cellHeight = doc.heightOfString(cellText, {
//         width: colWidths[i] - 2 * padding,
//         align: "left",
//       });
//       maxHeight = Math.max(maxHeight, cellHeight + 2 * padding);
//     });
//     maxHeight = Math.max(maxHeight, minRowHeight);

//     // Draw row cells
//     headers.forEach((header, i) => {
//       const cellText = row[header] || "";
//       doc.rect(currentX, currentY, colWidths[i], maxHeight).stroke();
//       doc.text(cellText, currentX + padding, currentY + padding, {
//         width: colWidths[i] - 2 * padding,
//         align: "left",
//       });
//       currentX += colWidths[i];
//     });
//     currentY += maxHeight;
//   });

//   return currentY;
// }

// // ---------- drawTextBox Helper ----------
// function drawTextBox(doc, x, y, width, title, content) {
//   const padding = 5;
//   const titleHeight = title ? 15 : 0;
//   doc.font("Helvetica").fontSize(10);

//   // Calculate text height
//   const contentHeight = doc.heightOfString(content, {
//     width: width - 2 * padding,
//     align: "justify",
//   });
//   const boxHeight = titleHeight + contentHeight + 2 * padding;

//   // Draw box
//   doc.save().lineWidth(1).strokeColor("#000").rect(x, y, width, boxHeight).stroke().restore();

//   // Title
//   if (title) {
//     doc.font("Helvetica-Bold").fontSize(10).text(title, x + padding, y + padding);
//   }

//   // Content
//   doc.font("Helvetica").fontSize(10).text(content, x + padding, y + padding + titleHeight, {
//     width: width - 2 * padding,
//     align: "justify",
//   });

//   return y + boxHeight + 20;
// }

// // ---------- generateCaseReport Main Function ----------
// function generateCaseReport(req, res) {
//   const { user, reportTimestamp, leadsData, caseSummary, selectedReports } = req.body;
//   const includeAll = selectedReports && selectedReports.FullReport;

//   // Helper to format dates
//   const formatDate = (dateString) => {
//     if (!dateString) return "";
//     const date = new Date(dateString);
//     if (isNaN(date)) return "";
//     const month = (date.getMonth() + 1).toString().padStart(2, "0");
//     const day = date.getDate().toString().padStart(2, "0");
//     const year = date.getFullYear().toString().slice(-2);
//     return `${month}/${day}/${year}`;
//   };

//   try {
//     const doc = new PDFDocument({ size: "LETTER", margin: 50 });

//     res.setHeader("Content-Type", "application/pdf");
//     res.setHeader("Content-Disposition", "inline; filename=report.pdf");
//     doc.pipe(res);

//     // ---------- Header Section ----------
//     const headerHeight = 80;
//     doc.rect(0, 0, doc.page.width, headerHeight).fill("#003366");

//     const logoHeight = 70;
//     const verticalCenterY = (headerHeight - logoHeight) / 2;
//     const logoPath = path.join(__dirname, "../../../frontend/public/Materials/newpolicelogo.png");
//     if (fs.existsSync(logoPath)) {
//       doc.image(logoPath, 10, verticalCenterY, { width: 70, height: 70 });
//     }

//     let currentY = headerHeight - 50;
//     doc.fillColor("white").font("Helvetica-Bold").fontSize(14).text("Case Report", 0, currentY, {
//       align: "center",
//     });
//     currentY = doc.y + 5;

//     doc.fillColor("white").font("Helvetica").fontSize(10);
//     doc.text(`Generated by: ${user}`, { align: "center" });
//     doc.text(`Timestamp: ${reportTimestamp}`, { align: "center" });
//     currentY = doc.y + 20;

//     doc.fillColor("black");

//     // ---------- Case Summary ----------
//     if (caseSummary) {
//       doc.font("Helvetica-Bold").fontSize(12).text("Case Summary:", 50, currentY);
//       currentY += 20;
//       currentY = drawTextBox(doc, 50, currentY, 512, "", caseSummary) + 20;
//     }

//     // ---------- Iterate Over Leads ----------
//     if (leadsData && leadsData.length > 0) {
//       leadsData.forEach((lead) => {
//         // Page check
//         if (currentY + 50 > doc.page.height - doc.page.margins.bottom) {
//           doc.addPage();
//           currentY = doc.page.margins.top;
//         }

//         // ---------- LEAD DETAILS ----------
//         // Instead of "Lead X" by array index, we do "Lead No. {lead.leadNo}"
//         doc.font("Helvetica-Bold").fontSize(12).text(`Lead No. ${lead.leadNo} Details:`, 50, currentY);
//         currentY += 20;

//         // All columns the same width, e.g. 128 each for 4 columns
//         const colWidths = [128, 128, 128, 128];

//         // 1) Basic lead details table
//         currentY = drawTable(
//           doc,
//           50,
//           currentY,
//           ["Lead No.", "Lead Origin", "Assigned Date", "Completed Date"],
//           [
//             {
//               "Lead No.": lead.leadNo || "N/A",
//               "Lead Origin": lead.parentLeadNo ? lead.parentLeadNo.join(", ") : "N/A",
//               "Assigned Date": formatDate(lead.assignedDate) || "N/A",
//               "Completed Date": formatDate(lead.completedDate) || "N/A",
//             },
//           ],
//           colWidths
//         ) + 20;

//         // 2) "Lead Log Summary" - If you store it in lead.logSummary or similar
//         if (includeAll && lead.logSummary) {
//           if (currentY + 50 > doc.page.height - doc.page.margins.bottom) {
//             doc.addPage();
//             currentY = doc.page.margins.top;
//           }
//           doc.font("Helvetica-Bold").fontSize(12).text("Lead Log Summary:", 50, currentY);
//           currentY += 20;
//           currentY = drawTextBox(doc, 50, currentY, 512, "", lead.logSummary) + 20;
//         }

//         // 3) "Lead Instruction" - If you store it in lead.description or similar
//         if (includeAll && lead.description) {
//           if (currentY + 50 > doc.page.height - doc.page.margins.bottom) {
//             doc.addPage();
//             currentY = doc.page.margins.top;
//           }
//           doc.font("Helvetica-Bold").fontSize(12).text("Lead Instruction:", 50, currentY);
//           currentY += 20;
//           currentY = drawTextBox(doc, 50, currentY, 512, "", lead.description) + 20;
//         }

//         // ---------- LEAD RETURNS ----------
//         if (includeAll) {
//           if (lead.leadReturns && lead.leadReturns.length > 0) {
//             lead.leadReturns.forEach((lr) => {
//               // Page check
//               if (currentY + 50 > doc.page.height - doc.page.margins.bottom) {
//                 doc.addPage();
//                 currentY = doc.page.margins.top;
//               }

//               // 1) Lead Return ID and result
//               doc.font("Helvetica-Bold").fontSize(12).text(`Lead Return ID: ${lr.leadReturnId}`, 50, currentY);
//               currentY += 20;
//               currentY = drawTextBox(doc, 50, currentY, 512, "", lr.leadReturnResult || "") + 20;

//               // 2) Person Details
//               if (lr.persons && lr.persons.length > 0) {
//                 doc.font("Helvetica-Bold").fontSize(12).text("Person Details:", 50, currentY);
//                 currentY += 20;
//                 lr.persons.forEach((person) => {
//                   const personTables = [
//                     {
//                       headers: ["Date Entered", "Name", "Phone #", "Address"],
//                       widths: [128, 128, 128, 128],
//                       row: {
//                         "Date Entered": formatDate(person.enteredDate),
//                         "Name": person.firstName
//                           ? `${person.firstName}, ${person.lastName}`
//                           : "N/A",
//                         "Phone #": person.cellNumber || "N/A",
//                         "Address": person.address
//                           ? `${person.address.street1 || ""}, ${person.address.city || ""}, ${person.address.state || ""}, ${person.address.zipCode || ""}`
//                           : "N/A",
//                       },
//                     },
//                     {
//                       headers: ["Last Name", "First Name", "Middle Initial", "Cell Number"],
//                       widths: [128, 128, 128, 128],
//                       row: {
//                         "Last Name": person.lastName || "N/A",
//                         "First Name": person.firstName || "N/A",
//                         "Middle Initial": person.middleInitial || "",
//                         "Cell Number": person.cellNumber || "N/A",
//                       },
//                     },
//                     // Add more person sub-tables if needed...
//                   ];

//                   // Print each sub‐table
//                   personTables.forEach((tbl) => {
//                     if (currentY + 50 > doc.page.height - doc.page.margins.bottom) {
//                       doc.addPage();
//                       currentY = doc.page.margins.top;
//                     }
//                     currentY = drawTable(doc, 50, currentY, tbl.headers, [tbl.row], tbl.widths) + 20;
//                   });
//                 });
//               }

//               // 3) Vehicle Details
//               if (lr.vehicles && lr.vehicles.length > 0) {
//                 if (currentY + 50 > doc.page.height - doc.page.margins.bottom) {
//                   doc.addPage();
//                   currentY = doc.page.margins.top;
//                 }
//                 doc.font("Helvetica-Bold").fontSize(12).text("Vehicle Details:", 50, currentY);
//                 currentY += 20;
//                 const vehicleHeaders = ["Date Entered", "Make", "Model", "Plate", "State"];
//                 const vehicleRows = lr.vehicles.map((vehicle) => ({
//                   "Date Entered": formatDate(vehicle.enteredDate),
//                   "Make": vehicle.make || "N/A",
//                   "Model": vehicle.model || "N/A",
//                   "Plate": vehicle.plate || "N/A",
//                   "State": vehicle.state || "N/A",
//                 }));
//                 // If you want 5 columns the same width, do e.g. [102, 102, 102, 102, 104]
//                 currentY = drawTable(doc, 50, currentY, vehicleHeaders, vehicleRows, [102, 102, 102, 102, 104]) + 20;
//               }

//               // 4) If you want to check for no persons, no vehicles, etc.
//               // if (lr.persons?.length === 0) {
//               //   doc.text("No Person Details", 50, currentY);
//               //   currentY += 20;
//               // }

//               // 5) Enclosures, Pictures, Evidence, Audio, Video, Scratchpad, Timeline, etc.
//             });
//           } else {
//             // If no returns for this lead, show a table or text indicating no returns
//             if (currentY + 50 > doc.page.height - doc.page.margins.bottom) {
//               doc.addPage();
//               currentY = doc.page.margins.top;
//             }

//             // Example: a small table with 1 row stating no returns
//             const headers = ["Lead Returns"];
//             const rows = [{ "Lead Returns": "No Lead Returns Available" }];
//             const widths = [512]; // single column
//             currentY = drawTable(doc, 50, currentY, headers, rows, widths) + 20;
//           }
//         }
//       });
//     } else {
//       doc.text("No leads data available.", 50, currentY);
//     }

//     doc.end();
//   } catch (error) {
//     console.error("Error generating PDF:", error);
//     res.status(500).json({ error: "Failed to generate PDF" });
//   }
// }

// module.exports = { generateCaseReport };


const PDFDocument = require("pdfkit");
const path = require("path");
const fs = require("fs");

// A simple 2-column table: Label, Value
function drawTwoColumnTable(doc, startX, startY, rows, colWidths = [150, 362], padding = 5) {
  // We'll draw each row with 2 columns: "Label" and "Value"
  doc.font("Helvetica-Bold").fontSize(10);
  let currentY = startY;

  // For each row, we measure the needed height and draw cells
  rows.forEach((row) => {
    // We have row.Label, row.Value
    const cellHeightLabel = doc.heightOfString(row.Label || "", {
      width: colWidths[0] - 2 * padding,
      align: "left",
    });
    const cellHeightValue = doc.heightOfString(row.Value || "", {
      width: colWidths[1] - 2 * padding,
      align: "left",
    });
    const maxHeight = Math.max(cellHeightLabel, cellHeightValue) + 2 * padding;
    // Draw label cell
    doc.rect(startX, currentY, colWidths[0], maxHeight).stroke();
    doc.text(row.Label || "", startX + padding, currentY + padding, {
      width: colWidths[0] - 2 * padding,
      align: "left",
    });
    // Draw value cell
    doc.rect(startX + colWidths[0], currentY, colWidths[1], maxHeight).stroke();
    // Switch to normal font for the value (so label is bold, value is normal)
    doc.font("Helvetica").fontSize(10);
    doc.text(row.Value || "", startX + colWidths[0] + padding, currentY + padding, {
      width: colWidths[1] - 2 * padding,
      align: "left",
    });
    // Switch back to bold for next label
    doc.font("Helvetica-Bold").fontSize(10);

    currentY += maxHeight;
  });

  return currentY;
}

// A single‐column table for “No Lead Returns Available”
function drawSingleColumnTable(doc, startX, startY, headerText, bodyText, tableWidth = 512) {
  const padding = 5;
  let currentY = startY;

  // Header row
  doc.font("Helvetica-Bold").fontSize(10);
  const headerHeight = 20;
  doc.rect(startX, currentY, tableWidth, headerHeight).stroke();
  doc.text(headerText, startX + padding, currentY + padding, {
    width: tableWidth - 2 * padding,
    align: "left",
  });
  currentY += headerHeight;

  // Body row
  doc.font("Helvetica").fontSize(10);
  const bodyHeight = doc.heightOfString(bodyText, {
    width: tableWidth - 2 * padding,
    align: "left",
  });
  const rowHeight = Math.max(bodyHeight + 2 * padding, 20);
  doc.rect(startX, currentY, tableWidth, rowHeight).stroke();
  doc.text(bodyText, startX + padding, currentY + padding, {
    width: tableWidth - 2 * padding,
    align: "left",
  });
  currentY += rowHeight;

  return currentY;
}

// Draw a text box for the “Lead Instruction” or similar
function drawInstructionBox(doc, startX, startY, width, label, instruction) {
  // We'll do a small heading row with “Lead Instruction” in bold, then a box for the content
  const padding = 5;
  const headerHeight = 20;
  doc.font("Helvetica-Bold").fontSize(10);
  doc.rect(startX, startY, width, headerHeight).stroke();
  doc.text(label, startX + padding, startY + padding);
  startY += headerHeight;

  // Now the instruction box
  doc.font("Helvetica").fontSize(10);
  const textHeight = doc.heightOfString(instruction || "", {
    width: width - 2 * padding,
    align: "left",
  });
  const boxHeight = Math.max(textHeight + 2 * padding, 20);
  doc.rect(startX, startY, width, boxHeight).stroke();
  doc.text(instruction || "", startX + padding, startY + padding, {
    width: width - 2 * padding,
    align: "left",
  });
  return startY + boxHeight;
}

function generateCaseReport(req, res) {
  const { user, reportTimestamp, leadsData, caseSummary, selectedReports } = req.body;
  const includeAll = selectedReports && selectedReports.FullReport;

  const formatDate = (dateString) => {
    if (!dateString) return "";
    const date = new Date(dateString);
    if (isNaN(date)) return "";
    const month = (date.getMonth() + 1).toString().padStart(2, "0");
    const day = date.getDate().toString().padStart(2, "0");
    const year = date.getFullYear().toString().slice(-2);
    return `${month}/${day}/${year}`;
  };

  try {
    const doc = new PDFDocument({ size: "LETTER", margin: 50 });
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", "inline; filename=report.pdf");
    doc.pipe(res);

    // Header
    const headerHeight = 80;
    doc.rect(0, 0, doc.page.width, headerHeight).fill("#003366");
    const logoPath = path.join(__dirname, "../../../frontend/public/Materials/newpolicelogo.png");
    if (fs.existsSync(logoPath)) {
      doc.image(logoPath, 10, 5, { width: 70, height: 70 });
    }
    let currentY = 15;
    doc.fillColor("white").font("Helvetica-Bold").fontSize(14).text("Case Report", 0, currentY, {
      align: "center",
    });
    currentY = doc.y + 5;
    doc.fillColor("white").font("Helvetica").fontSize(10);
    doc.text(`Generated by: ${user}`, { align: "center" });
    doc.text(`Timestamp: ${reportTimestamp}`, { align: "center" });
    // Move below header
    currentY = headerHeight + 10;
    doc.fillColor("black");

    // If we have a case summary
    if (caseSummary) {
      doc.font("Helvetica-Bold").fontSize(12).text("Case Summary:", 50, currentY);
      currentY += 20;
      // Make a text box for the summary
      const boxStart = currentY;
      const boxWidth = 512;
      const newY = drawTextBox(doc, 50, boxStart, boxWidth, "", caseSummary);
      currentY = newY + 10;
    }

    // For each lead
    if (leadsData && leadsData.length > 0) {
      leadsData.forEach((lead) => {
        // Page check
        if (currentY + 100 > doc.page.height - doc.page.margins.bottom) {
          doc.addPage();
          currentY = doc.page.margins.top;
        }
        // 2-column table for the lead info
        // We replicate your screenshot style:
        // Row1: Label=Lead Number, Value=lead.leadNo
        // Row2: Label=Lead Origin, Value=...
        // Row3: Label=Assigned Date, Value=...
        // Row4: Label=Completed Date, Value=...
        // Row5: Label=Assigned Officers, Value=...
        doc.font("Helvetica-Bold").fontSize(10).text("", 50, currentY);
        currentY += 5;
        const detailRows = [
          {
            Label: "Lead Number:",
            Value: lead.leadNo || "N/A",
          },
          {
            Label: "Lead Origin:",
            Value: lead.parentLeadNo ? lead.parentLeadNo.join(", ") : "N/A",
          },
          {
            Label: "Assigned Date:",
            Value: formatDate(lead.assignedDate) || "N/A",
          },
          {
            Label: "Completed Date:",
            Value: formatDate(lead.completedDate) || "N/A",
          },
          {
            Label: "Assigned Officers:",
            Value: lead.assignedTo || "N/A",
          },
        ];
        // 2 columns => label, value
        const colWidths = [150, 362];
        currentY = drawTwoColumnTable(doc, 50, currentY, detailRows, colWidths) + 10;

        // Now a small text box for the lead instruction
        // or if you store it as "lead.description"
        if (includeAll && lead.description) {
          currentY = drawInstructionBox(
            doc,
            50,
            currentY,
            512,
            "Lead Instruction",
            lead.description
          ) + 10;
        }

        // If no returns, we do a single column table
        if (!lead.leadReturns || lead.leadReturns.length === 0) {
          currentY = drawSingleColumnTable(
            doc,
            50,
            currentY,
            "Lead Returns",
            "No Lead Returns Available",
            512
          ) + 10;
        } else {
          // If you want to show returns or person details, you can replicate the approach.
          // For the screenshot style, we only show "No Lead Returns Available" or nothing.
        }
      });
    } else {
      doc.text("No leads data available.", 50, currentY);
    }

    doc.end();
  } catch (error) {
    console.error("Error generating PDF:", error);
    res.status(500).json({ error: "Failed to generate PDF" });
  }
}

module.exports = { generateCaseReport };
